stop("Argument 'test' NOT as required!",call.=F)
data <- data[data$included==1, c(Y.char, Z.char, prov.char)]
gamma <- fe.ls$df.prov$gamma; beta <- fe.ls$beta
gamma.null <- ifelse(null=="median", median(gamma),
ifelse(class(null)=="numeric", null[1],
stop("Argument 'null' NOT as required!",call.=F)))
if (test=="exact.bootstrap") {
exact.bootstrap <- function(df, n) {
probs <- plogis(gamma.null + unname(as.matrix(df[, Z.char])) %*% beta)
obs <- sum(df[,Y.char])
sums <- colSums(matrix(rbinom(n=length(probs)*n, size=1, prob=rep(probs,times=n)), ncol=n))
p <- (sum(sums>obs)+ 0.5*sum(sums==obs))/n
flag <- ifelse(p<alpha/2, 1, ifelse(p<=1-alpha/2, 0, -1))
p.val <- 2 * min(p, 1-p)
return(c(flag, p.val))
}
results <- sapply(by(data, data[,prov.char],identity),
FUN=function(x) exact.bootstrap(x, n))
return(data.frame(flag=factor(results[1,]), p=results[2,]))
}  else if (test=="score") {
data$probs <- plogis(gamma.null + unname(as.matrix(data[, Z.char])) %*% beta)
z.score <- sapply(split(data[,Y.char]-data$probs,data[,prov.char]),sum) /
sqrt(sapply(split(data$probs*(1-data$probs),data[,prov.char]),sum))
p <- pnorm(z.score, lower=F)
flag <- ifelse(p<alpha/2, 1, ifelse(p<=1-alpha/2, 0, -1))
p.val <- 2 * pmin(p, 1-p)
return(data.frame(flag=factor(flag), p=p.val, row.names=unique(data[, prov.char])))
} else if (test=="exact.poisbinom") {
exact.poisbinom <- function(df) {
probs <- plogis(gamma.null + unname(as.matrix(df[, Z.char])) %*% beta)
obs <- sum(df[,Y.char])
p <- 1 - ppoibin(obs, probs) + 0.5*dpoibin(obs, probs)
flag <- ifelse(p<alpha/2, 1, ifelse(p<=1-alpha/2, 0, -1))
p.val <- 2 * min(p, 1-p)
return(c(flag, p.val))
}
results <- sapply(by(data, data[,prov.char],identity),
FUN=function(x) exact.poisbinom(x))
return(data.frame(flag=factor(results[1,]), p=results[2,]))
} else if (test=="exact.binom") {
exact.binom <- function(df) {
probs <- plogis(gamma.null + unname(as.matrix(df[, Z.char])) %*% beta)
obs <- sum(df[,Y.char])
p <- 1 - pbinom(obs, size=length(probs), prob=mean(probs)) +
0.5*dbinom(obs, size=length(probs), prob=mean(probs))
flag <- ifelse(p<alpha/2, 1, ifelse(p<=1-alpha/2, 0, -1))
p.val <- 2 * min(p, 1-p)
return(c(flag, p.val))
}
results <- sapply(by(data, data[,prov.char],identity),
FUN=function(x) exact.binom(x))
return(data.frame(flag=factor(results[1,]), p=results[2,]))
}
} # end of test.fe.prov
confint.fe.prov <- function(data, fe.ls, Y.char, Z.char, prov.char, alpha) {
data <- data[data$included==1, ]
df.prov <- fe.ls$df.prov
gamma <- df.prov$gamma; names(gamma) <- rownames(df.prov)
beta <- fe.ls$beta
max.gamma <- norm(as.matrix(gamma[is.finite(gamma)]),"I")
CL.finite <- function(df) {
UL.gamma <- function(Gamma)
ppoibin(Obs-1,plogis(Gamma+Z.beta))+0.5*dpoibin(Obs-1,plogis(Gamma+Z.beta))-alpha/2
LL.gamma <- function(Gamma)
1-ppoibin(Obs,plogis(Gamma+Z.beta))+0.5*dpoibin(Obs-1,plogis(Gamma+Z.beta))-alpha/2
prov <- ifelse(length(unique(df[,prov.char]))==1, unique(df[,prov.char]),
stop("Number of providers involved NOT equal to one!"))
Z.beta <- as.matrix(df[,Z.char])%*%beta
Obs <- df.prov[prov, "Obs"]; Exp <- df.prov[prov, "Exp"]
gamma.lower <- uniroot(LL.gamma, gamma[prov]+c(-5,0))$root
gamma.upper <- uniroot(UL.gamma, gamma[prov]+c(0,5))$root
SRR.lower <- sum(plogis(gamma.lower+Z.beta)) / Exp
SRR.upper <- sum(plogis(gamma.upper+Z.beta)) / Exp
return(c(gamma.lower, gamma.upper, SRR.lower, SRR.upper))
}
CL.no.readm <- function(df) {
prov <- ifelse(length(unique(df[,prov.char]))==1, unique(df[,prov.char]),
stop("Number of providers involved NOT equal to one!"))
Z.beta <- as.matrix(df[,Z.char])%*%beta
max.Z.beta <- norm(Z.beta, "I")
gamma.upper <- uniroot(function(x) prod(plogis(-x-Z.beta))/2-alpha,
(10+max.Z.beta)*c(-1,1))$root
SRR.upper <- sum(plogis(gamma.upper+Z.beta)) / df.prov[prov, "Exp"]
return(c(-Inf, gamma.upper, 0, SRR.upper))
}
CL.all.readm <- function(df) {
prov <- ifelse(length(unique(df[,prov.char]))==1, unique(df[,prov.char]),
stop("Number of providers involved NOT equal to one!"))
Z.beta <- as.matrix(df[,Z.char])%*%beta
max.Z.beta <- norm(Z.beta, "I")
Exp <- df.prov[prov, "Exp"]; SRR <- df.prov[prov, "SRR"]
gamma.lower <- uniroot(function(x) prod(plogis(x+Z.beta))/2-alpha,
(10+max.Z.beta)*c(-1,1))$root
SRR.lower <- sum(plogis(gamma.lower+Z.beta)) / Exp
return(c(gamma.lower, Inf, SRR.lower, SRR))
}
confint.finite <- sapply(by(data[(data$no.readm==0) & (data$all.readm==0),], data[(data$no.readm==0) & (data$all.readm==0),prov.char],identity),
FUN=function(df) CL.finite(df))
confint.no.readm <- sapply(by(data[data$no.readm==1,], data[data$no.readm==1,prov.char],identity),
FUN=function(df) CL.no.readm(df))
confint.all.readm <- sapply(by(data[data$all.readm==1,], data[data$all.readm==1,prov.char],identity),
FUN=function(df) CL.all.readm(df))
confint.df <- as.data.frame(t(cbind(confint.finite, confint.no.readm, confint.all.readm)))
names(confint.df) <- c("gamma.lower", "gamma.upper", "SRR.lower", "SRR.upper")
return(confint.df[order(rownames(confint.df)),])
}
funnel.SRR <- function(input.dis, input.prov, target=1, alphas=c(0.1, 0.05, 0.01), type="FE.score", file, sigma.b=NULL){
# input.dis: a data frame consisting of discharge-specific inputs and provider ID
# input.prov: a data frame consisting of provider-specific inputs ordered by provider ID
# target
# alphas
# type
# file
# sigma.b
if (length(unique(input.dis$ID))!=NROW(input.prov))
stop("Number of unique provider IDs NOT equal to length of indicator vector!",.call=F)
n <- length(alphas); m <- NROW(input.prov); alphas <- alphas[order(alphas)]
mean.obs.prov <- as.numeric(sapply(split(input.dis$prob,input.dis$ID),sum))
var.obs.prov <- as.numeric(sapply(split(input.dis$prob*(1-input.dis$prob),input.dis$ID),sum))
if (grepl("FE.",type)) {
se.SRR <- sqrt(var.obs.prov) / mean.obs.prov
}  else if (grepl("FERE.",type)) {
if (is.null(sigma.b)) stop("Arugument 'sigma.b' NOT as required!")
se.SRR <- sqrt(var.obs.prov * (1+sigma.b*var.obs.prov)) / mean.obs.prov
}
order.prec <- order(se.SRR, decreasing=T)
input.prov <- input.prov[order.prec,]; se.SRR <- se.SRR[order.prec]
data <- data.frame(precision=se.SRR^{-2}, indicator=input.prov$SRR, flag=input.prov$flag)
ctrl.limits <- data.frame(precision=rep(se.SRR^{-2}, each=n), alpha=rep(alphas, times=m),
exp=rep(mean.obs.prov[order.prec], each=n))
if (grepl("score",type)) {
ctrl.limits$upper <- target+qnorm(1-ctrl.limits$alpha/2)*sqrt(1/ctrl.limits$precision)
ctrl.limits$lower <- target-qnorm(1-ctrl.limits$alpha/2)*sqrt(1/ctrl.limits$precision)
} else if (grepl("exact",type)) {
CL.obs <- function(df) {
aux <- function(alpha) {
# lower CL for obs
o <- qpoibin(alpha/2, df$prob)
o <- ifelse(ppoibin(o-1,df$prob)+0.5*dpoibin(o,df$prob)>=alpha/2, o, o+1)
lambda <- (dpoibin(o,df$prob)+2*ppoibin(o-1,df$prob)-alpha) /
(dpoibin(o,df$prob)+dpoibin(o-1,df$prob))
lower <- pmax(o-lambda,0)
# upper CL for obs
o <- qpoibin(1-alpha/2, df$prob)
o <- ifelse(ppoibin(o-1,df$prob)+0.5*dpoibin(o,df$prob)>=1-alpha/2, o, o+1)
lambda <- (dpoibin(o,df$prob)+2*ppoibin(o-1,df$prob)-2+alpha) /
(dpoibin(o-1,df$prob)+dpoibin(o,df$prob))
upper <- pmin(o-lambda, length(df$prob))
return(c(lower, upper))
}
return(as.vector(t(sapply(alphas, FUN=aux))))
}
mat <- unname(sapply(by(input.dis,input.dis[,"ID"],identity),FUN=function(df) CL.obs(df)))[,order.prec]
ctrl.limits$lower <- as.vector(mat[1:n,]) / ctrl.limits$exp
ctrl.limits$upper <- as.vector(mat[(n+1):(2*n),]) / ctrl.limits$exp
}
ctrl.limits$alpha <- factor(ctrl.limits$alpha)
xmax <- max(se.SRR^{-2}); ymax <- max(input.prov$SRR)
labs.color <- paste0(levels(input.prov$flag)," (",round((summary(input.prov$flag)/m*100),digits=2),")")
labs.linetype <- paste0((1-alphas)*100,"%")
values.linetype <- c('dashed','dotted','dotdash','longdash','twodash')[1:length(alphas)]
values.linetype[alphas==0.05] <- 'solid'
ggplot() + theme_classic() +
theme(legend.justification=c(1,1), legend.position=c(1,1), legend.title=element_text(face="bold")) +
scale_x_continuous(name="Effective Provider Size", limits=c(0, xmax)) +
scale_y_continuous(name="SRR", breaks=round(seq(0,ymax,by=1),1), limits=c(0, ymax)) +
geom_point(data=data, aes(x=precision, y=indicator, color=flag), shape=20, size=0.9, alpha=1) + # "#619CFF"
scale_color_manual(values=c('darkblue','#E69F00', 'darkred'), labels=labs.color) +
geom_line(data=ctrl.limits, aes(x=precision, y=lower, group=alpha, linetype=alpha), size=.6) +
geom_line(data=ctrl.limits, aes(x=precision, y=upper, group=alpha, linetype=alpha), size=.6) +
scale_linetype_manual(values=values.linetype, labels=labs.linetype) +
labs(linetype="Ctrl Limits", color="Flagging (%)") +
guides(color=guide_legend(order=1), linetype=guide_legend(reverse=TRUE, order=2)) +
geom_hline(yintercept=target, size=.6, linetype="dashed") # color="#F8766D"
ggsave(file, width=8, height=8)
}
## data simulation
m <- 500
prov.size <- pmax(round(rnorm(m, 50, 15)),11)
gamma <- rnorm(m, log(3/7), 0.4)
beta <- c(1,0.5,-1)
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:length(beta))
data <- sim.fe.prov(m, prov.size, gamma, beta, Y.char, Z.char, prov.char)
library(Matrix)
library(poibin)
library(ggplot2)
cutoff <- 10              # an integer as cutoff of facility (or provider) size with 10 as default
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
n <- 10000                # resample size, 10000 as default
alpha <- 0.05             # significance level
data.prepared <- fe.data.prep(data, Y.char, Z.char, prov.char, cutoff) # data preparation
fe.ls <- fe.prov(data.prepared, Y.char, Z.char, prov.char, tol) # model fitting
# hypothesis testing
null <- "median"
score.fe <- test.fe.prov(data.prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
exact.pb <- test.fe.prov(data.prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.poisbinom", null, alpha)
exact.bs <- test.fe.prov(data.prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.bootstrap", null, alpha, n)
exact.binom <- test.fe.prov(data.prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.binom", null="median", alpha)
# provider-specific confidence intervals for SRR
str(score.fe)
str(exact.pb)
document()
?test.fe.prov
document()
?test.fe.prov
document()
?test.fe.prov
document()
?test.fe.prov
?fe.data.prep
data(hospital) # build in data set
hospital_prepared <- fe.data.prep(hospital, Y.char, Z.char, prov.char, cutoff) # data preparation
data(hospital) # build in data set
# Name input variables and other parameters
cutoff <- 10              # an integer as cutoff of facility (or provider) size with 10 as default
alpha <- 0.05             # significance level
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
hospital_prepared <- fe.data.prep(hospital, Y.char, Z.char, prov.char, cutoff) # data preparation
?fe.prov
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data.prepared <- data(hospital_prepared) # build in data set
fe.ls <- fe.prov(data.prepared, Y.char, Z.char, prov.char, tol) # model fitting
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
?confint.fe.prov
?lm
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha)
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha)
system.time(
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha)
)
?system.time
system.time("
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha)
")
system.time(
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha))
f <- function() {
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha))
}
f <- function() {
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha)
}
system.time(f)
f <- function() {
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha)
}
system.time(f())
dim(hospital_prepared)
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
# Compute for a subset of the providers
confint.fe.prov(hospital_prepared[1:150,], fe.ls, Y.char, Z.char, prov.char, alpha)
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha)
?test.fe.prov
cutoff <- 10              # an integer as cutoff of facility (or provider) size with 10 as default
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
n <- 10000                # resample size, 10000 as default
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# Hypothesis tests
null = "median"
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# Hypothesis tests
null = "median"
alpha = 0.05
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
?funnel.fe.prov
?funnel.SRR
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# Hypothesis tests
null = "median"
alpha <- 0.05             # significance level
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
# format input data for funnel plot
input.dis <- data.frame(ID=hospital_prepared[hospital_prepared$included==1, prov.char], prob=fe.ls$Exp)
input.prov <- data.frame(SRR=fe.ls$df.prov$SRR, flag=score.fe$flag)
# render funnel plot
target <- c(1)
alphas = c(0.1, 0.05, 0.01)
funnel.SRR(input.dis, input.prov, target, alphas, type="FE.score")
document()
?test.fe.prov
load_all(".")
# fe.data.prep
data(hospital) # build in data set
# Name input variables and other parameters
cutoff <- 10              # an integer as cutoff of facility (or provider) size with 10 as default
alpha <- 0.05             # significance level
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
hospital_prepared <- fe.data.prep(hospital, Y.char, Z.char, prov.char, cutoff) # data preparation
# fe.prov
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confint.fe.prov
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha)
# test.fe.prov
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# Hypothesis tests
null = "median"
alpha = 0.05
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
# funnel.fe.prov
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# Hypothesis tests
null = "median"
alpha <- 0.05             # significance level
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
# format input data for funnel plot
input.dis <- data.frame(ID=hospital_prepared[hospital_prepared$included==1, prov.char], prob=fe.ls$Exp)
input.prov <- data.frame(SRR=fe.ls$df.prov$SRR, flag=score.fe$flag)
# render funnel plot
target <- c(1)
alphas = c(0.1, 0.05, 0.01)
funnel.SRR(input.dis, input.prov, target, alphas, type="FE.score")
?fe.prov
install.packages("bart")
install.packages("BART")
library(BART)
?surv.bart
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::check()
?ppoibin
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
?plogis
?NCOL
?plogis
library(devtools)
load_all()
documne
document()
load_all()
check()
?plogis
document()
load_all()
check()
devtools::document()
check()
?precision
document()
load_all()
devtools::load_all()
check()
foo <- 1:10
foo
attributes(foo)
class(foo)
attr(foo, "class") <- "bar"
class(foo)
confint
?confint
fe.ls
class(fe.ls)
load_all()
?fe.prov
load_all()
