alpha <- 0.05 # significance level
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha)
}
system.time(f)
f <- function() {
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha)
}
system.time(f())
dim(hospital_prepared)
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
# Compute for a subset of the providers
confint.fe.prov(hospital_prepared[1:150,], fe.ls, Y.char, Z.char, prov.char, alpha)
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha)
?test.fe.prov
cutoff <- 10              # an integer as cutoff of facility (or provider) size with 10 as default
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
n <- 10000                # resample size, 10000 as default
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# Hypothesis tests
null = "median"
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# Hypothesis tests
null = "median"
alpha = 0.05
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
?funnel.fe.prov
?funnel.SRR
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# Hypothesis tests
null = "median"
alpha <- 0.05             # significance level
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
# format input data for funnel plot
input.dis <- data.frame(ID=hospital_prepared[hospital_prepared$included==1, prov.char], prob=fe.ls$Exp)
input.prov <- data.frame(SRR=fe.ls$df.prov$SRR, flag=score.fe$flag)
# render funnel plot
target <- c(1)
alphas = c(0.1, 0.05, 0.01)
funnel.SRR(input.dis, input.prov, target, alphas, type="FE.score")
document()
?test.fe.prov
load_all(".")
# fe.data.prep
data(hospital) # build in data set
# Name input variables and other parameters
cutoff <- 10              # an integer as cutoff of facility (or provider) size with 10 as default
alpha <- 0.05             # significance level
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
hospital_prepared <- fe.data.prep(hospital, Y.char, Z.char, prov.char, cutoff) # data preparation
# fe.prov
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confint.fe.prov
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, alpha)
# test.fe.prov
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# Hypothesis tests
null = "median"
alpha = 0.05
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
# funnel.fe.prov
# Name input variables and other parameters
tol <- 1e-5               # a small positive number specifying stopping criterion of Newton-Raphson algorithm
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# Hypothesis tests
null = "median"
alpha <- 0.05             # significance level
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
# format input data for funnel plot
input.dis <- data.frame(ID=hospital_prepared[hospital_prepared$included==1, prov.char], prob=fe.ls$Exp)
input.prov <- data.frame(SRR=fe.ls$df.prov$SRR, flag=score.fe$flag)
# render funnel plot
target <- c(1)
alphas = c(0.1, 0.05, 0.01)
funnel.SRR(input.dis, input.prov, target, alphas, type="FE.score")
?fe.prov
install.packages("bart")
install.packages("BART")
library(BART)
?surv.bart
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::check()
?ppoibin
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
?plogis
?NCOL
?plogis
library(devtools)
load_all()
documne
document()
load_all()
check()
?plogis
document()
load_all()
check()
devtools::document()
check()
?precision
document()
load_all()
devtools::load_all()
check()
foo <- 1:10
foo
attributes(foo)
class(foo)
attr(foo, "class") <- "bar"
class(foo)
confint
?confint
fe.ls
class(fe.ls)
load_all()
?fe.prov
load_all()
library(devtools)
load_all()
?fe.prov
# Name input variables and other parameters
# a small positive number specifying stopping
# criterion of Newton-Raphson algorithm
tol <- 1e-5
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
class(fe.ls)
?confint
devtools::load_all()
document
document()
load_all()
?confint
?confint.fe.prov
# Name input variables and other parameters
# a small positive number specifying stopping
# criterion of Newton-Raphson algorithm
tol <- 1e-5
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(fe.ls, level = 0.95, hospital_prepared, Y.char, Z.char, prov.char)
?fe.prov
document()
?fe.prov
document()
?fe.prov
funnel.SRR()
?funnel.SRR
?test.fe.prov
document()
check()
document()
document()
load_all()
check()
document()
load_all()
check()
?confint
?confint.fe.prov
# Name input variables and other parameters
# a small positive number specifying stopping
# criterion of Newton-Raphson algorithm
tol <- 1e-5
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(fe.ls, level = 0.95, hospital_prepared, Y.char, Z.char, prov.char)
document()
load_all()
check()
.S3methods(confint)
print(confint)
document()
load_all()
check()
document()
load_all()
check()
?confint
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
?confint.lm
?confint.default
.S3methods(confint)
?confint.nls
library(nls)
install.packages(nls)
library(glm)
install.packages(glm)
install.packages("glm")
install.packages("glmm")
.S3methods(glm)
.S3methods(plot)
?plot.gtable
library(stats)
?plot.acf
document()
check()
.S3methods(print)
document()
check()
X <- list(1:3,4:6,7:9)
X
lapply(X, mean)
do.call(mean, X)
do.call(rbind, X)
rbind(x[[1]], x[[2]], x[[3]])
rbind(X[[1]], X[[2]], X[[3]])
document()
check()
document()
check()
?is.equal
?all.equal
"parm" == "parm"
document()
check()
document()
check()
document()
check()
``` r
input.prov <- data.frame(SRR=fe.ls$df.prov$SRR, flag=exact.pb$flag)
funnel.SRR(input.dis, input.prov, target, alphas, type="FE.score")
```
``` r
# Simulate a data set
m <- 500
prov.size <- pmax(round(rnorm(m, 50, 15)),11)
gamma <- rnorm(m, log(3/7), 0.4)
beta <- c(1,0.5,-1)
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:length(beta))
data <- sim.fe.prov(m, prov.size, gamma, beta, Y.char, Z.char, prov.char)
```
This data is also available in the included data sets that come with the package.
To use the included data, run:
document()
load_all()
?fe.prov
check()
?fe.prov
document
document()
?fe.prov
document()
?test.fe.prov
?funnel.SRR
?fe.data.prep
document()
?fe.data.prep
document()
?funnel.SRR
load_all()
?check_rhub
?check_cran
?check_rhub
check_rhub(pkg = ".")
document()
load_all()
check_rhub(pkg = ".")
check_rhub(pkg = ".")
document()
load_all()
check_rhub(pkg = ".")
document()
load_all()
# other imports
library(Matrix)
library(poibin)
library(ggplot2)
data(hospital)            # raw data
data(hospital_prepared)   # processed data
# a small positive number specifying stopping criterion of Newton-Raphson algorithm
tol <- 1e-5
# Name input variables and other parameters
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# hypothesis testing
null <- "median"
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
exact.pb <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.poisbinom", null, alpha)
exact.bs <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.bootstrap", null, alpha, n)
n <- 10000
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
exact.pb <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.poisbinom", null, alpha)
exact.bs <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.bootstrap", null, alpha, n)
exact.binom <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.binom", null="median", alpha)
head(score.fe)
head(exact.pb)
head(exact.bs)
head(exact.binom)
summary(exact.binom$flag)
# confidence intervals
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.95, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.99, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
head(confint.df)
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
object
parm
level
data
Y.char
Z.char
prov.char
?confint
?confint.fe.prov
confint.df <- confint.fe.prov(fe.ls, level = 0.90, data = hospital_prepared, Y.char = Y.char, Z.char = Z.char, prov.char = prov.char)
confint.df <- confint.fe.prov(fe.ls, level = 0.90, data = hospital_prepared, Y.char = Y.char, Z.char = Z.char, prov.char = prov.char)
confint.df <- confint.fe.prov(fe.ls, level = 0.90, data = hospital_prepared, Y.char = Y.char, Z.char = Z.char, prov.char = prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, data = hospital_prepared, Y.char = Y.char, Z.char = Z.char, prov.char = prov.char)
head(confint.df)
?lm
# confidence intervals
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.95, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.99, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.98, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.95, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.96, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.955, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.94, hospital_prepared, Y.char, Z.char, prov.char)
head(confint.df)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.99, hospital_prepared, Y.char, Z.char, prov.char)
LL.gamma()
LL.gamma
gamma[prov]+c(-5,0)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
null <- "median"
n <- 10000
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
exact.pb <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.poisbinom", null, alpha)
exact.bs <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.bootstrap", null, alpha, n)
exact.binom <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.binom", null="median", alpha)
# confidence intervals
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.95, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, level = 0.90, data = hospital_prepared, Y.char = Y.char, Z.char = Z.char, prov.char = prov.char)
# Prepare funnel plot inputs
target <- 1
alphas <- c(0.01, 0.05, 0.1)
input.dis <- data.frame(ID=data.prepared[data.prepared$included==1, prov.char], prob=fe.ls$Exp)
?funnel.fe.prov
?funnel.SRR
# format input data for funnel plot
input.dis <- data.frame(ID=hospital_prepared[hospital_prepared$included==1, prov.char],
prob=fe.ls$Exp)
input.prov <- data.frame(SRR=fe.ls$df.prov$SRR, flag=score.fe$flag)
input.prov <- data.frame(SRR=fe.ls$df.prov$SRR, flag=score.fe$flag)
funnel.SRR(input.dis, input.prov, target, alphas, type="FE.score")
library(FEprovideR)
unlink('README_cache', recursive = TRUE)
.DollarNames()
tools::package_dependencies(reverse = TRUE)
tools::package_dependencies(reverse = TRUE)$FEprovideR
tools::package_dependencies(reverse = TRUE)$FE
devtools::document()
load_all()
?fe.data.prep
?fe.prov
?test.fe.prov
document
document()
?test.fe.prov
?funnel.SRR
?confint.fe.prov
document()
?confint.fe.prov
document
document()
devtools::check_rhub()
?devtools::check_win_devel
?devtools::check_built
build(binary = TRUE)
?build
build(binary = FALSE)
setwd("C:/Users/mkleinsa/Box/Projects/peter_song")
untar("./qif_1.0-5.tar.gz")
devtools::load_all("qif")
?qif
?options
install.packages("tensorflow")
?tensorflow
library(tensorflow)
?`tensorflow-package`
vignette("tensorflow")
preds <- c("v1", "v2", "v3")
preds
paste0(preds, " + ")
as.formula("Y~X1")
form <- as.formula("Y~X1")
attributes(form)
as.integer(pi)
