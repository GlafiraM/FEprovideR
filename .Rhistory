tol <- 1e-5
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
data(hospital_prepared) # build in data set
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# confidence intervals
alpha <- 0.05 # significance level
confint.fe.prov(fe.ls, level = 0.95, hospital_prepared, Y.char, Z.char, prov.char)
document()
load_all()
check()
.S3methods(confint)
print(confint)
document()
load_all()
check()
document()
load_all()
check()
?confint
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
?confint.lm
?confint.default
.S3methods(confint)
?confint.nls
library(nls)
install.packages(nls)
library(glm)
install.packages(glm)
install.packages("glm")
install.packages("glmm")
.S3methods(glm)
.S3methods(plot)
?plot.gtable
library(stats)
?plot.acf
document()
check()
.S3methods(print)
document()
check()
X <- list(1:3,4:6,7:9)
X
lapply(X, mean)
do.call(mean, X)
do.call(rbind, X)
rbind(x[[1]], x[[2]], x[[3]])
rbind(X[[1]], X[[2]], X[[3]])
document()
check()
document()
check()
?is.equal
?all.equal
"parm" == "parm"
document()
check()
document()
check()
document()
check()
``` r
input.prov <- data.frame(SRR=fe.ls$df.prov$SRR, flag=exact.pb$flag)
funnel.SRR(input.dis, input.prov, target, alphas, type="FE.score")
```
``` r
# Simulate a data set
m <- 500
prov.size <- pmax(round(rnorm(m, 50, 15)),11)
gamma <- rnorm(m, log(3/7), 0.4)
beta <- c(1,0.5,-1)
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:length(beta))
data <- sim.fe.prov(m, prov.size, gamma, beta, Y.char, Z.char, prov.char)
```
This data is also available in the included data sets that come with the package.
To use the included data, run:
document()
load_all()
?fe.prov
check()
?fe.prov
document
document()
?fe.prov
document()
?test.fe.prov
?funnel.SRR
?fe.data.prep
document()
?fe.data.prep
document()
?funnel.SRR
load_all()
?check_rhub
?check_cran
?check_rhub
check_rhub(pkg = ".")
document()
load_all()
check_rhub(pkg = ".")
check_rhub(pkg = ".")
document()
load_all()
check_rhub(pkg = ".")
document()
load_all()
# other imports
library(Matrix)
library(poibin)
library(ggplot2)
data(hospital)            # raw data
data(hospital_prepared)   # processed data
# a small positive number specifying stopping criterion of Newton-Raphson algorithm
tol <- 1e-5
# Name input variables and other parameters
Y.char <- 'Y'
prov.char <- 'prov.ID'
Z.char <- paste0('z', 1:3)
fe.ls <- fe.prov(hospital_prepared, Y.char, Z.char, prov.char, tol) # model fitting
# hypothesis testing
null <- "median"
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
exact.pb <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.poisbinom", null, alpha)
exact.bs <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.bootstrap", null, alpha, n)
n <- 10000
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
exact.pb <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.poisbinom", null, alpha)
exact.bs <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.bootstrap", null, alpha, n)
exact.binom <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.binom", null="median", alpha)
head(score.fe)
head(exact.pb)
head(exact.bs)
head(exact.binom)
summary(exact.binom$flag)
# confidence intervals
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.95, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.99, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
head(confint.df)
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
object
parm
level
data
Y.char
Z.char
prov.char
?confint
?confint.fe.prov
confint.df <- confint.fe.prov(fe.ls, level = 0.90, data = hospital_prepared, Y.char = Y.char, Z.char = Z.char, prov.char = prov.char)
confint.df <- confint.fe.prov(fe.ls, level = 0.90, data = hospital_prepared, Y.char = Y.char, Z.char = Z.char, prov.char = prov.char)
confint.df <- confint.fe.prov(fe.ls, level = 0.90, data = hospital_prepared, Y.char = Y.char, Z.char = Z.char, prov.char = prov.char)
load_all()
confint.df <- confint.fe.prov(fe.ls, level = 0.90, data = hospital_prepared, Y.char = Y.char, Z.char = Z.char, prov.char = prov.char)
head(confint.df)
?lm
# confidence intervals
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.95, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.99, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.98, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.95, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.96, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.955, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.94, hospital_prepared, Y.char, Z.char, prov.char)
head(confint.df)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.99, hospital_prepared, Y.char, Z.char, prov.char)
LL.gamma()
LL.gamma
gamma[prov]+c(-5,0)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
null <- "median"
n <- 10000
score.fe <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="score", null, alpha)
exact.pb <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.poisbinom", null, alpha)
exact.bs <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.bootstrap", null, alpha, n)
exact.binom <- test.fe.prov(hospital_prepared, fe.ls, Y.char, Z.char, prov.char, test="exact.binom", null="median", alpha)
# confidence intervals
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.95, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, parm = "all", level = 0.90, hospital_prepared, Y.char, Z.char, prov.char)
confint.df <- confint.fe.prov(fe.ls, level = 0.90, data = hospital_prepared, Y.char = Y.char, Z.char = Z.char, prov.char = prov.char)
# Prepare funnel plot inputs
target <- 1
alphas <- c(0.01, 0.05, 0.1)
input.dis <- data.frame(ID=data.prepared[data.prepared$included==1, prov.char], prob=fe.ls$Exp)
?funnel.fe.prov
?funnel.SRR
# format input data for funnel plot
input.dis <- data.frame(ID=hospital_prepared[hospital_prepared$included==1, prov.char],
prob=fe.ls$Exp)
input.prov <- data.frame(SRR=fe.ls$df.prov$SRR, flag=score.fe$flag)
input.prov <- data.frame(SRR=fe.ls$df.prov$SRR, flag=score.fe$flag)
funnel.SRR(input.dis, input.prov, target, alphas, type="FE.score")
library(FEprovideR)
unlink('README_cache', recursive = TRUE)
.DollarNames()
tools::package_dependencies(reverse = TRUE)
tools::package_dependencies(reverse = TRUE)$FEprovideR
tools::package_dependencies(reverse = TRUE)$FE
devtools::document()
load_all()
?fe.data.prep
?fe.prov
?test.fe.prov
document
document()
?test.fe.prov
?funnel.SRR
?confint.fe.prov
document()
?confint.fe.prov
document
document()
devtools::check_rhub()
?devtools::check_win_devel
?devtools::check_built
build(binary = TRUE)
?build
build(binary = FALSE)
setwd("C:/Users/mkleinsa/Box/Projects/peter_song")
untar("./qif_1.0-5.tar.gz")
devtools::load_all("qif")
?qif
?options
install.packages("tensorflow")
?tensorflow
library(tensorflow)
?`tensorflow-package`
vignette("tensorflow")
preds <- c("v1", "v2", "v3")
preds
paste0(preds, " + ")
as.formula("Y~X1")
form <- as.formula("Y~X1")
attributes(form)
as.integer(pi)
library(dplyr)
?select
%fx% <- function(x) {x + x}
%fxf% <- function(x) {x + x}
`%fxf%` <- function(x) {x + x}
%fxf%(2)
`%fxf%'(2)
2
22
)
)))))
psps
"
`
2 `%fxf%' 2
2222
`
%fxf%(2)
View(`%fxf%`)
`fxf`(2)
`%fxf%`(2)
`%fxf%` 2
library(nycflights13)
library("nycflights13")
install.packages("mycflights13")
install.packages("nycflights13")
library(nycflights13)
View(flights)
flights %>% filter(dest == "IAH")
flights %>% select(day, dep_time)
flights %>% filter(dest == "DTW") %>% select(carrier)
flights %>% arrange(month, desc(day))
names(flights)
?flights
flights %>%
filter(flight == 4401)
flights %>%
filter(flight == 4401) %>%
arrange(desc(year, month, day))
flights %>%
filter(flight == 4401) %>%
arrange(desc(year))
flights %>%
filter(flight == 4401) %>%
arrange(year)
flights %>%
filter(flight == 4401) %>%
arrange(desc(month))
flights %>%
filter(flight == 4401) %>%
arrange(desc(month, day))
flights %>%
filter(flight == 4401) %>%
arrange(desc(month)) %>% arrange(desc(day))
flights %>%
filter(flight == 4401) %>%
arrange(desc(month))
flights %>%
filter(flight == 4401) %>%
arrange(desc(month)) %>%
select(day)
flights %>%
filter(flight == 4401) %>%
arrange(desc(month)) %>%
select(day, month == max(month))
flights %>%
filter(flight == 4401, month == max(month)) %>%
arrange(desc(month)) %>%
select(day)
flights %>%
filter(flight == 4401, month == max(month)) %>%
select(day)
flights %>%
filter(flight == 4401, month == 6) %>%
select(day)
flights %>%
filter(flight == 4401, month == 6) %>%
select(max(day))
flights %>%
filter(flight == 4401, month == 6) %>%
select(day) %>% filter(max(day))
flights %>%
filter(flight == 4401) %>%
arrange(desc(day)) %>%
select(day)
flights %>%
filter(flight == 4401) %>%
arrange(desc(month)) %>%
select(day)
flights %>% filter(!is.na(arr_delay)) %>% summarize(avg_arr_delay = mean(arr_delay))
flights %>%
filter(!is.na(arr_delay)) %>%
group_by(carrier) %>%
mutate(avg_arr_delay = mean(arr_delay))
flights %>%
count(carrier)
flights %>%
count(carrier) %>%
arrange(desc(n))
flights %>%
filter(carrier == "UA") %>%
group_by(month) %>%
)))
flights %>%
filter(carrier == "UA") %>%
group_by(month)
flights %>%
filter(carrier == "UA") %>%
group_by(month) %>%
select(carrier, month)
flights %>%
filter(carrier == "UA") %>%
group_by(month) %>%
select(carrier, month) %>% count(month)
flights %>%
filter(carrier == "UA") %>%
group_by(month) %>%
select(carrier, month) %>%
count(month) %>%
max()
flights %>%
filter(carrier == "UA") %>%
group_by(month) %>%
select(carrier, month) %>%
count(month) %>%
arrange(desc())
flights %>%
filter(carrier == "UA") %>%
group_by(month) %>%
select(carrier, month) %>%
count(month) %>%
arrange(desc(n))
names(flights)
flights %>%
summarise(mean(air_time))
flights %>%
filter(!is.na(air_time))
flights %>%
filter(!is.na(air_time)) %>%
summarise(mean(air_time))
names(flights)
flights %>%
group_by(carrier) %>%
desc(dep_delay) %>%
max()
flights %>%
group_by(carrier) %>%
desc(dep_delay) %>%
summarise(maxf = max(dep_delay))
flights %>%
group_by(carrier) %>%
summarise(maxf = max(dep_delay))
flights %>%
group_by(carrier) %>%
summarise(maxf = max(dep_delay, na.rm = TRUE))
airlines
flights %>%
filter(!is.na(arr_delay)) %>%
group_by(carrier) %>%
summarize(avg_arr_delay = mean(arr_delay)) %>%
left_join(airlines)
flights %>%
filter(!is.na(arr_delay)) %>%
group_by(carrier) %>%
summarize(avg_arr_delay = mean(arr_delay)) %>%
left_join(airlines, carrier)
x <- -1:5
x
lead(x)
lag(x)
flights %>%
group_by(tailnum) %>%
summarize(flights=n(), routes=n_distinct(flight))
library(qif)
install.packages("C:/Users/mkleinsa/Downloads/qif_1.0-5.tar.gz", repos = NULL, type = "source")
library(qif)
?qif
?qif
`*` function(x,y) x + x/y
`*` <-  function(x,y) x + x/y
3*4
%x%  <- function(a,b) {
a + a/b
}
`%x%`  <- function(a,b) {
a + a/b
}
3%x%4
`%>%` <- function(x, FUN) FUN(x)
times2 <- function(x) x + x
3 %>% times2()
3 %>% times2
iris %>% head
1E4
1E4 %>% rnorm
1E4 %>% rnorm %>% hist
1:10 %>%
map(rnorm, n = 10)
install.packages("purrr")
1:10 %>%
map(rnorm, n = 10)
install.packages("purrr")
library(purrr)
1:10 %>%
map(rnorm, n = 10)
1:10 %>%
map(rnorm, n = 10) %>%
map_dbl(mean)
1:10 %>%
map(rnorm, n = 10) %>%
map_dbl(mean)
1:10 %>%
map(function(x) rnorm(10, x))
purrr::map(rnorm, n = 10)
1:10 %>%
map(~ rnorm(10, .x))
list(foo = 1, bar = 2) %>% map(`+`, 10)
list(foo = 1, bar = 2) %>% map(`+`, 10)
1:10 %>%
map(rnorm, n = 10) %>%
map_dbl(mean)
1:10 %>%
map(rnorm, n = 10)
1:10 %>%
map(rnorm, n = 10) %>%
map_dbl(mean)
?rnorm
list(1:10,2:11) %>%
map(function(x,y) rnorm(10, x,y))
list(1:10,2:11) %>%
map(function(x,y) rnorm(10, mean = x,sd = y))
list("x" = 1:10,"y" = 2:11) %>%
map(function(x,y) rnorm(10, mean = x,sd = y))
mtcars %>%
split(.$cyl)
unique(mtcars$cyl)
mtcars %>%
split(.$cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .)) %>%
unique(mtcars$cyl)
mtcars %>%
split(.$cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .))
mtcars %>%
split(.$cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .)) %>%
map(summary)
mtcars %>%
split(.$cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .)) %>%
lapply(summary)
